//Programa para cuenta dedicada iotporcinar@gmail.com PASSW: iotporcionar2024
// Cuando funciona Arduinocloud, no funciona emailsend
#include <EMailSender.h>  //https://mischianti.org/send-email-with-esp8266-and-arduino/
#include "thingProperties.h"
#include <ESP8266WiFi.h>
#include "Arduino.h"
//#include <Wire.h>
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/63743901-de11-4eda-b8e3-bb7f8a8c5c79 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float caudal;
  float conductividad;
  float presion;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
/*
//Designaciones WIFI
const char* ssid = "Galaxy S20 FE4927";  //<-------COLOCAR NOMBRE DE RED WIFI
const char* password = "heladera";       //<-------COLOCAR CONTRASEÑA
uint8_t connection_state = 0;
uint16_t reconnect_interval = 10000;
*/
//Variables para el tiempo de envio de mails
unsigned long lastEmailTime = 0;
unsigned long emailInterval = 0;  // Intervalo de un día en milisegundos, para que solo se envie 1 mail por dia

//EMailSender emailSend("fsiotservice@gmail.com", "busherujqbsxcnfl");
EMailSender emailSend("iotporcinar@gmail.com", "eduualkoihpwpsbd");  //Contraseña creada por google como "App Password". Sirve para que wemos pueda acceder y usar los servicios de Gmail

String data;
bool send_mail = false;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

/*  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Conectando a WiFi...");
  }
*/
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(4);
  ArduinoCloud.printDebugInfo();

  EMailSender::EMailMessage message;
  message.subject = "Soggetto";
  message.message = "Ciao come stai<br>io bene.<br>www.mischianti.org";

  EMailSender::Response resp = emailSend.send("iotporcinar@gmail.com", message);

  Serial.println("Sending status: ");

  Serial.println(resp.status);
  Serial.println(resp.code);
  Serial.println(resp.desc);
}

void loop() {
  ArduinoCloud.update();

  if (digitalRead(D3) == LOW) {  //Prueba de envio de mails a traves de pin D3
    // Envía el correo electrónico
    EMailSender::EMailMessage message;
    message.subject = "Alerta: Pin D2 conectado";
    message.message = "El pin D2 está conectado.";

    EMailSender::Response resp = emailSend.send("iotporcinar@gmail.com", message);
    if (resp.status == 1) {
      Serial.println("Correo enviado correctamente.");
    } else {
      Serial.println("Error al enviar el correo.");
    }
    Serial.println(resp.status);
    Serial.println(resp.code);
    Serial.println(resp.desc);
    // Espera un tiempo antes de volver a verificar
    delay(6000);  // Espera 1 minuto
  }

  if (Serial.available()) {
    String data = Serial.readStringUntil('\n');

    // Extraer el primer valor (l_hour)
    int idx1 = data.indexOf(',');
    caudal = data.substring(0, idx1).toFloat();

    // Extraer el segundo valor (l_hour2)
    data = data.substring(idx1 + 1);
    int idx2 = data.indexOf(',');
    caudal2 = data.substring(0, idx2).toFloat();

    // Extraer el tercer valor (caudal_total)
    data = data.substring(idx2 + 1);
    int idx3 = data.indexOf(',');
    caudal_total = data.substring(0, idx3).toFloat();

    // Extraer el cuarto valor (ppm)
    data = data.substring(idx3 + 1);
    int idx4 = data.indexOf(',');
    conductividad = data.substring(0, idx4).toFloat();

    // Extraer el quinto valor (send_mail)
    data = data.substring(idx4 + 1);
    send_mail = (data.toInt() == 1);

    // Imprimir los valores leídos
    Serial.print("Litres/hour 1: ");
    Serial.println(caudal);
    Serial.print("Litres/hour 2: ");
    Serial.println(caudal2);
    Serial.print("Caudal total: ");
    Serial.println(caudal_total);
    Serial.print("PPM: ");
    Serial.println(conductividad);
    Serial.print("Send Mail: ");
    Serial.println(send_mail);
  }
}